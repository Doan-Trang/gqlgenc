{{ reserveImport "bytes" }}
{{ reserveImport "context" }}
{{ reserveImport "encoding/json" }}
{{ reserveImport "fmt" }}
{{ reserveImport "io" }}
{{ reserveImport "io/ioutil" }}
{{ reserveImport "net/http" }}
{{ reserveImport "net/url" }}
{{ reserveImport "path" }}
{{ reserveImport "time" }}

{{ reserveImport "golang.org/x/xerrors" }}

{{ reserveImport "github.com/Yamashou/gqlgenc/graphqljson" }}
{{ reserveImport "github.com/Yamashou/gqlgenc/clientv2" }}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, interceptors ...clientv2.RequestInterceptor) *Client {
	return &Client{Client: clientv2.NewClient(cli, baseURL, interceptors...)}
}

type {{ .Query.Name | go }} {{ .Query.Type | ref }}

type {{ .Mutation.Name | go }} {{ .Mutation.Type | ref }}

{{- range $name, $element := .Interface }}
	type {{ $element.Name | go }} {{ $element.Type | ref }}
	{{- range $name1, $element1 := $element.InterfaceResponseTypes }}
		type {{ $element1.Name | go }} {{ $element1.Type | ref }}
		{{- range $name2, $element2 := $element1.ImplementsFuncs }}
			func (r *{{ $element1.Name | go }}) {{ $element2.Name | go }}() *{{ $element2.ResponseTypeName | go }} {
				{{if eq $element1.Name $element2.ResponseTypeName }}
					return r
				{{ else }}
					return nil
				{{ end }}
			}
		{{- end }}
	{{- end }}
{{- end}}

{{- range $name, $element := .Fragment }}
	type  {{ $element.Name | go  }} {{ $element.Type | ref }}
{{- end }}

{{- range $name, $element := .OperationResponse }}
	type  {{ $element.Name | go  }} {{ $element.Type | ref }}
{{- end }}

{{- range $model := .Operation}}
	const {{ $model.Name|go }}Document = `{{ $model.Operation }}`

	func (c *Client) {{ $model.Name|go }} (ctx context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}, interceptors ...clientv2.RequestInterceptor) (*{{ $model.ResponseStructName | go }}, error) {
	vars := map[string]interface{}{
	{{- range $args := .VariableDefinitions}}
		"{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
	{{- end }}
	}

	var res {{ $model.ResponseStructName | go }}
	if err := c.Client.Post(ctx, "{{ $model.Name|go }}", {{ $model.Name|go }}Document, &res, vars, interceptors...); err != nil {
	return nil, err
	}

	return &res, nil
	}
{{- end}}
